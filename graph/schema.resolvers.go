package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"virtuozplay/graph/model"
	db "virtuozplay/models"
)

// StartPerformance is the resolver for the startPerformance field.
func (r *mutationResolver) StartPerformance(ctx context.Context) (*model.Performance, error) {
	_ = ctx
	return ToGraphQLPerformance(r.Performances.New())
}

// AddNotesToPerformance is the resolver for the addNotesToPerformance field.
func (r *mutationResolver) AddNotesToPerformance(ctx context.Context, id string, notes []*model.NoteInput) (*model.Performance, error) {
	_ = ctx
	perf, err := r.Performances.FindInProgressByNanoID(db.NanoID(id))
	if err != nil {
		return nil, err
	}

	errors := make(gqlerror.List, 0)

	for i, note := range notes {
		err = perf.AppendNote(i,
			note.At,
			note.Duration,
			note.Value,
		)
		// Append the invalid notes to the errors list, but only if we haven't reached the limit (to avoid spamming the user)
		if err != nil && uint(len(errors)) < db.NoteValidationLimit {
			errors = append(errors, gqlerror.Wrap(err))
		}
	}
	// Append the notes that are not invalid
	gqlPerf, gqlErr := ToGraphQLPerformance(perf, r.Performances.Update(perf))

	if gqlErr != nil {
		return nil, gqlErr
	}
	if len(errors) > 0 {
		// Return invalid note errors, note that the valid ones are still saved
		return gqlPerf, errors
	}
	return gqlPerf, nil
}

// FinishPerformance is the resolver for the finishPerformance field.
func (r *mutationResolver) FinishPerformance(ctx context.Context, id string) (*model.Performance, error) {
	_ = ctx
	perf, err := r.Performances.FindByNanoID(db.NanoID(id))
	if err != nil {
		return nil, err
	}

	return ToGraphQLPerformance(perf, r.Performances.MarkAsFinished(perf))
}

// VirtuozPlay is the resolver for the virtuozPlay field.
func (r *queryResolver) VirtuozPlay(ctx context.Context) (*model.VirtuozPlay, error) {
	_ = ctx
	return &model.VirtuozPlay{Version: "0.1.0"}, nil
}

// Performance is the resolver for the performance field.
func (r *queryResolver) Performance(ctx context.Context, id string) (*model.Performance, error) {
	_ = ctx
	return ToGraphQLPerformance(r.Performances.FindByNanoID(db.NanoID(id)))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
