# GraphQL schema
#
# Documentation at: https://gqlgen.com/getting-started/

schema {
  query: Query
  mutation: Mutation
}

"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer."
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The root query type."
type Query {
  virtuozPlay: VirtuozPlay!
  "Retrieve a performance by its ID."
  performance(id: ID!): Performance
  "Fetches _ALL_ songs, there might be a lot of data."
  songs: [Song!]!
  "Fetches a single song by its ID."
  song(id: ID!): Song
}

"The root mutation type."
type Mutation {
  "Begin a new performance for the given song."
  startPerformance(songId: ID!): Performance!
  "Add notes to a performance, each new note must have a 'at' value greater than any existing note's 'at' value in the performance."
  addNotesToPerformance(id: ID!, notes: [InputNote!]!): Performance!
  finishPerformance(id: ID!): Performance!

  "TEMPORARY: Create a new song, to *delete* when we have a proper song creation flow."
  debug_createSong(title: String!): Song!
}

type Song {
  id: ID!
  title: String!
  img_url: String!
  url: String!
  music_path: String!
  notes: [SongNote!]!
}

"This is a separate type from PerformanceNote for now"
type SongNote {
  measure: Int!
  note: String!
  fret: Int!
  string: Int!
  octave: Int!
  duration: Int!
  alter: Int!
  default: Float!
  beat: Int!
  type: String!
}

type VirtuozPlay {
  version: String!
}

type Performance {
  id: ID!
  "The song that is being/was performed"
  song: Song!
  "The creator of this performance, null when user was not logged in"
  author: User
  createdAt: String
  "The total duration of the performance, in milliseconds."
  duration: Int!
  "The total precision scope, ranging from 0 to 1."
  precision: Float!
  "An array of *all* notes in the performance, sorted by their start time."
  notes: [PerformanceNote!]!
}

type PerformanceNote {
  "The offset of the note's start from the beginning of the performance, in milliseconds."
  at: Int!
  "The duration of the note, in milliseconds."
  duration: Int!
  "Human-readable representation of the note (e.g. 'C#', 'D', 'Fb', etc.)"
  value: String!
  "Octave of the note"
  octave: Int!
  "The precision of this performed note compared to the song's corresponding note, ranging from 0 (0%) to 1 (100%)."
  precision: Float!
}

input InputNote {
  "The offset of the note's start from the beginning of the performance, in milliseconds."
  at: Int!
  "The duration of the note, in milliseconds."
  duration: Int!
  "Human-readable representation of the note (e.g. 'C#', 'D', 'Fb', etc.)"
  value: String!
  "Octave of the note"
  octave: Int!
}

type User {
  id: ID!
  name: String
  email: String
}
