// Code generated using `yarn codegen`, DO NOT EDIT.
//
// no really though, do not edit this file.
// noinspection JSUnusedGlobalSymbols

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
    ID: { input: string; output: string };
    String: { input: string; output: string };
    Boolean: { input: boolean; output: boolean };
    Int: { input: number; output: number };
    Float: { input: number; output: number };
    Timestamp: { input: any; output: any };
};

export type Note = {
    readonly __typename?: 'Note';
    readonly end: Scalars['Timestamp']['output'];
    readonly fret: Scalars['Int']['output'];
    readonly measure: Scalars['Int']['output'];
    readonly note: Scalars['String']['output'];
    readonly octave: Scalars['Int']['output'];
    readonly start: Scalars['Timestamp']['output'];
    readonly string: Scalars['Int']['output'];
};

export type Query = {
    readonly __typename?: 'Query';
    readonly songs: ReadonlyArray<Maybe<Song>>;
    readonly virtuozPlay: VirtuozPlay;
};

export type Song = {
    readonly __typename?: 'Song';
    readonly notes: ReadonlyArray<Maybe<Note>>;
    readonly title: Scalars['String']['output'];
};

export type VirtuozPlay = {
    readonly __typename?: 'VirtuozPlay';
    readonly version: Scalars['String']['output'];
};